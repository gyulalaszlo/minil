;;(def fs (require "fs"))


(defn save-as-midi [file notes]
  (with-local data (notes.map (fn [note i] i))
    (fs.saveFileSync file data "utf-8")))



(def beat-bits {:on-beat [1 0 0 0]
                 :syncopated [1 0 0]
                 :off-beat [0 0 1 0]
                })

(def kick-config {:on-beat {:velocity 120
                            :chance 100}

                  :syncopated {:velocity {:mean 50
                                          :stdev 30}
                               :chance 20}

                  })

(def DEFAULT-BIT-CFG {:velocity 0
                      :chance 0})

(defn fold-left [f init-value seq]
  (seq.reduce (fn [m e i] (f e m i))
                init-value))

(defn map [f seq] (seq.map f))


(defn create-rythm [bits-config rythm-config]
  (fold-left (fn [key steps]
               (let [bit-setup (Object.assign DEFAULT-BIT-CFG
                                              (get key rythm-config))
                     beat-steps (get key bits-config)
                     chance (/ bit-setup.chance 100)

                     beat-step-at
                     (fn [i] (get (% i beat-steps.length) beat-steps))

                     gen-step
                     (fn [mean stdev] (+ mean (* stdev (Math.random))))]

                 (map (fn [old-step-value i]
                        (+ (* (beat-step-at i) chance (Math.random))
                           old-step-value))
                      steps)))
             [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
             (Object.keys rythm-config)))


(console.log
  (create-rythm beat-bits kick-config))
