;;(def fs (require "fs"))


(defn save-as-midi [file notes]
  (with-local data (notes.map (fn [note i] i))
    (fs.saveFileSync file data "utf-8")))



(def beat-bits {:on-beat [1 0 0 0]
                 :syncopated [1 0 0]
                 :off-beat [0 0 1 0]
                })

(def kick-config {:on-beat {:velocity 120
                            :chance 100}

                  :syncopated {:velocity {:mean 120
                                          :stdev 0}
                               :chance 20}

                  })



(defn fold-left [f init-value seq]
  (seq.reduce (fn [m e i] (f e m i))
                init-value))

(defn map [f seq] (seq.map f))


(defn create-rythm [bits-config rythm-config]
  (fold-left (fn [key steps]
               (with-local bit-setup (Object.assign
                                       {:velocity 0
                                        :chance 0}
                                       (get key rythm-config))
                 (with-local beat-steps (get key bits-config)
                   (map (fn [old-step-value i]
                          (+ old-step-value (* (get (% i beat-steps.length) beat-steps)
                                               (/ bit-setup.chance 100)
                                               (Math.random))))
                        steps))))
             [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
             (Object.keys rythm-config)))


(console.log
  (create-rythm beat-bits kick-config))
